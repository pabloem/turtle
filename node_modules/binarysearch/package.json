{
  "name": "binarysearch",
  "description": "pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.",
  "version": "0.2.4",
  "repository": {
    "url": "git://github.com/soldair/node-binarysearch.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js"
  },
  "contributors": [
    {
      "name": "Ryan Day",
      "email": "soldair@gmail.com"
    },
    {
      "name": "Nicolas LaCasse",
      "email": "nicolas.lacasse@gmail.com",
      "url": "https://github.com/nlacasse"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "tap": "~0.4.1"
  },
  "readme": "\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to where or key of searched value in the array\n  - if the key is in the array the key will point to\n    - the first key that has that value by default\n    - the last key that has that value if {end:true} option is specified\n  - only returns -1 if array is empty \n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === 0\nbs.closest([1,2,4,5,6],200) === 6\n\n// non unique matching/matching at end of series\nbs.closest([1,2,4,5,5,5,6],5) === 3\nbs.closest([1,2,4,5,5,5,6],5,{end:true}) === 5\n\n```\n\nquery for rangeValue (inclusive). returns sliced values.\n\n```js\nbs.rangeValue([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nor simply access the array offsets directly as [start,end]\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [2,6]\n\n```\n\ninsert a value into a sorted array.\n\n```js\nvar arr = [1,3,4];\nbs.insert(arr,2) === 1\n// returns the key it inserted into \n\narr[1] === 2\n// true\n \n```\nwhen you insert values and there are duplicates the default behavior is to insert the new value after the other same values.\nif you pass option.unique = true the key's value is replaced with the new value\n\n```js\nvar arr = [1,2,3];\nbs.insert(arr,2)\n// arr is [1,2,2,3]\n\nvar arr = [1,2,3];\nbs.insert(arr,2,{unique:true});\n// arr is [1,2,3]\n \n```\n\ncreate an object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\n```\n\nsearch an object index\n\n```js\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\n// [{k:'b',v:11},{k:'a',v:22}];\n\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/soldair/node-binarysearch/issues"
  },
  "_id": "binarysearch@0.2.4",
  "dist": {
    "shasum": "46ef3e03fd4529e9328662e68e40328e7a0bf2ac",
    "tarball": "http://registry.npmjs.org/binarysearch/-/binarysearch-0.2.4.tgz"
  },
  "_from": "binarysearch@",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "soldair",
    "email": "soldair@gmail.com"
  },
  "maintainers": [
    {
      "name": "soldair",
      "email": "soldair@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "46ef3e03fd4529e9328662e68e40328e7a0bf2ac",
  "_resolved": "https://registry.npmjs.org/binarysearch/-/binarysearch-0.2.4.tgz"
}
